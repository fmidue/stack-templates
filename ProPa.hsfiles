{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.3.0.1
extra-source-files:
  - README.md
build-tools: []
ghc-options:
  - -Wunused-local-binds
  - -Wunused-matches
  - -Wunused-pattern-binds
  - -Wdeprecations
  - -Wempty-enumerations
  - -Widentities
  - -Wname-shadowing
  - -Woverflowed-literals
  - -Woverlapping-patterns
  - -Wtabs
dependencies:
  - HUnit
  - QuickCheck
  - array
  - base
  - codeworld-api
  - containers
  - text
  - ghc-heap-view
  - pretty-simple
  - pretty-tree
library:
  source-dirs: src
  default-extensions:
    - PartialTypeSignatures
    - TupleSections
    - DeriveGeneric
    - DeriveAnyClass
  exposed-modules: []

{-# START_FILE stack.yaml #-}
resolver: lts-21.25
extra-deps:
  - git: https://github.com/fmidue/codeworld
    commit: 6ed1d0886988773dbc6b92f91666ccc100e63622
    subdirs:
      - codeworld-api
  - patch-0.0.8.4
  - reflex-0.9.3.3
  - ghc-heap-view-0.6.4.1
  - git: https://github.com/owestphal/pretty-tree
    commit: 9b26f302002ac6e4a93347420ac06dfd1cbcc0f8
allow-newer: true

{-# START_FILE .ghci #-}
:def! setPrintHeapDepth \x -> return $ ":def! printHeap \\x -> return $ \"performGC >> GHC.HeapView.buildHeapGraph (" ++ x ++ ") () (GHC.HeapView.asBox (\" ++ x ++ \")) >>= putStrLn . GHC.HeapView.ppHeapGraph\""

:m + System.Mem
:setPrintHeapDepth 1000

:m + Text.Pretty.Simple

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE README.md #-}
# {{name}}
Basic project setup for the lecture "Programmierparadigmen" (summer term 2025)

- Install necessary dependencies: `stack build --only-dependencies`
- If on Linux or macOS, don't forget `chmod go-w .`
- Place new files inside the `src` folder.
- Load single file with `stack ghci -- src/Filename.hs`, then run contents from it, e.g., by entering `main`
- For smooth integration with Haskell plugins, e.g. in VSCode, all modules must have a unique name (ghc expects the module name to be identical to the file name).

{-# START_FILE src/CodeWorldExample.hs #-}
-- | An example module using CodeWorld

module CodeWorldExample where

import CodeWorld

{-| Draw something -}
main :: IO ()
main = drawingOf (circle 3)


{-# START_FILE src/PlainHaskellExample.hs #-}
{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# HLINT ignore "Use :" #-}
-- | An example module for plain Haskell

module PlainHaskellExample where

f :: Int -> Int
f x = x + 1

{-# START_FILE src/Helpers/Drawable.hs #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE DefaultSignatures #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}

module Helpers.Drawable (
  Generic,
  Drawable,
  printTree,
  drawStructure,
  drawVerticalStructure,
  ) where

import GHC.Generics
import Data.Tree
import Data.Tree.Pretty
import Data.Ratio

printTree :: Drawable t => t -> IO ()
printTree = putStr . drawVerticalStructure

class Drawable t where
  toTree :: t -> Tree String

  default toTree :: (Generic t, GDrawable (Rep t)) => t -> Tree String
  toTree = head . gtoTree . from

drawStructure :: Drawable t => t -> String
drawStructure = drawTree . toTree

drawVerticalStructure :: Drawable t => t -> String
drawVerticalStructure = drawVerticalTree . toTree

instance Drawable Bool where
  toTree x = Node (show x) []

instance Drawable Int where
  toTree x = Node (show x) []

instance Drawable Integer where
  toTree x = Node (show x) []

instance Show a => Drawable (Ratio a) where
  toTree x = Node (show x) []

instance Drawable Float where
  toTree x = Node (show x) []

instance Drawable Double where
  toTree x = Node (show x) []

instance Drawable Char where
  toTree x = Node (show x) []

instance {-#OVERLAPPING#-} Drawable String where
  toTree x = Node (show x) []

instance (Drawable a) => Drawable [a] where
  toTree xs = Node "[]" (map toTree xs)

instance (Drawable a) => Drawable (Maybe a)

instance (Drawable a, Drawable b) => Drawable (Either a b)

instance (Drawable a, Drawable b) => Drawable (a, b)

instance (Drawable a, Drawable b, Drawable c) => Drawable (a, b, c)

instance (Drawable a, Drawable b, Drawable c, Drawable d) => Drawable (a, b, c, d)

-- generic instances
class GDrawable f where
  gtoTree :: f t -> [Tree String]

instance GDrawable f => GDrawable (D1 c f) where
  gtoTree = gtoTree . unM1

instance GDrawable f => GDrawable (S1 c f) where
  gtoTree = gtoTree . unM1

instance (Constructor c, GDrawable f) => GDrawable (C1 c f) where
  gtoTree (M1 x) = [Node (conName @c (M1 x)) (gtoTree x)]

instance (GDrawable f, GDrawable g) => GDrawable (f :+: g) where
  gtoTree (L1 x) = gtoTree x
  gtoTree (R1 y) = gtoTree y

instance (GDrawable f, GDrawable g) => GDrawable (f :*: g) where
  gtoTree (x :*: y) = gtoTree x ++ gtoTree y

instance Drawable t => GDrawable (K1 i t) where
  gtoTree (K1 x) = [toTree x]

instance GDrawable U1 where
  gtoTree U1 = []
