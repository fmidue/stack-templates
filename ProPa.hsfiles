{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.2.0.0
extra-source-files:
  - README.md
build-tools: []
ghc-options:
  - -Wunused-local-binds
  - -Wunused-matches
  - -Wunused-pattern-binds
  - -Wdeprecations
  - -Wempty-enumerations
  - -Widentities
  - -Wname-shadowing
  - -Woverflowed-literals
  - -Woverlapping-patterns
  - -Wtabs
dependencies:
  - HUnit
  - QuickCheck
  - array
  - base
  - codeworld-api
  - containers
  - text
  - ghc-heap-view
  - pretty-simple
library:
  source-dirs: src
  default-extensions:
    - PartialTypeSignatures
  exposed-modules: []

{-# START_FILE stack.yaml #-}
resolver: lts-21.25
extra-deps:
  - codeworld-api-0.8.1
  - patch-0.0.8.2
  - reflex-0.9.3.0
  - ghc-heap-view-0.6.4.1

allow-newer: true

{-# START_FILE .ghci #-}
:def! setPrintHeapDepth \x -> return $ ":def! printHeap \\x -> return $ \"performGC >> GHC.HeapView.buildHeapGraph (" ++ x ++ ") () (GHC.HeapView.asBox (\" ++ x ++ \")) >>= putStrLn . GHC.HeapView.ppHeapGraph\""

:m + System.Mem
:setPrintHeapDepth 1000

:m + Text.Pretty.Simple

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE README.md #-}
# {{name}}
Basic project setup for the lecture "Programmierparadigmen" (summer term 2024)

- Install necessary dependencies: `stack build --only-dependencies`
- If on Linux or macOS, don't forget `chmod go-w .`
- Place new files inside the `src` folder
- Load single file with `stack ghci -- src/Filename.hs`, then run contents from it, e.g., by entering `main`
- For smooth integration with Haskell plugins, e.g. in VSCode, all modules must have a unique name (ghc expects the module name to be identical to the file name)

{-# START_FILE src/CodeWorldExample.hs #-}
-- | An example module using CodeWorld

module CodeWorldExample where

import CodeWorld

{-| Draw something -}
main :: IO ()
main = drawingOf (circle 3)


{-# START_FILE src/PlainHaskellExample.hs #-}
{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# HLINT ignore "Use :" #-}
-- | An example module for plain Haskell

module PlainHaskellExample where

f :: Int -> Int
f x = x + 1
